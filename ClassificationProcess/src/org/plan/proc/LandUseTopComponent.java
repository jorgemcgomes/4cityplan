/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.plan.proc;

import java.util.Collection;
import java.util.Collections;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.WindowManager;
import org.plan.maps.MapProvider;

/**
 * Top component which displays something.
 */
@TopComponent.Description(preferredID = "LandUseTopComponent",persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@TopComponent.OpenActionRegistration(displayName = "#CTL_LandUseTopComponent",preferredID = "LandUseTopComponent")
@ActionID(category = "Window", id = "org.plan.proc.LandUseTopComponent")
@ActionReference(path = "Menu/Window")
public final class LandUseTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener {

    private ExplorerManager explorer;

    public LandUseTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(LandUseTopComponent.class, "CTL_LandUseTopComponent"));
        setToolTipText(NbBundle.getMessage(LandUseTopComponent.class, "HINT_LandUseTopComponent"));
        explorer = new ExplorerManager();
        super.associateLookup(ExplorerUtils.createLookup(explorer, super.getActionMap()));
        ((BeanTreeView) treeView).setRootVisible(false);
        explorer.setRootContext(Lookup.getDefault().lookup(LandUseExplorer.class).getRoot());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        treeView = new BeanTreeView();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(treeView, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(treeView, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane treeView;
    // End of variables declaration//GEN-END:variables

    @Override
    public ExplorerManager getExplorerManager() {
        return explorer;
    }

    private Lookup.Result<StepNode> categoriesResult;
    private Collection<? extends StepNode> previousResult = Collections.EMPTY_LIST;

    @Override
    public void componentOpened() {
	categoriesResult = this.getLookup().lookupResult(StepNode.class);
	categoriesResult.allInstances();
	categoriesResult.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
	categoriesResult.removeLookupListener(this);
        categoriesResult = null;
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Collection<? extends StepNode> selected = categoriesResult.allInstances();
        for(StepNode n : previousResult) {
            if(!selected.contains(n) && n instanceof DisplayNode) {
                ((DisplayNode) n).unhighlightFeatures();
            }
        }
        for(StepNode n : selected) {
            if(!previousResult.contains(n) && n instanceof DisplayNode) {
                ((DisplayNode) n).highlightFeatures();
            }
        }
        previousResult = selected;
        ((ProcessOntologyTopComponent) WindowManager.getDefault().findTopComponent("ProcessOntologyTopComponent")).deselectAll();
        Lookup.getDefault().lookup(MapProvider.class).getMainMap().update();
    }

    void deselectAll() {
        for(StepNode n : previousResult) {
            if(n instanceof DisplayNode) {
                ((DisplayNode) n).unhighlightFeatures();
            }
        }
        previousResult = Collections.EMPTY_LIST;
    }
}