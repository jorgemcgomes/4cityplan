/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.plan.ont;

import java.util.Collection;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;
import org.semanticweb.owlapi.model.OWLLiteral;

/**
 * Top component which displays something.
 */
@TopComponent.Description(preferredID = "EntityInfoTopComponent",persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = true)
@TopComponent.OpenActionRegistration(displayName = "#CTL_EntityInfoTopComponent",preferredID = "EntityInfoTopComponent")
@ActionID(category = "Window", id = "org.plan.ont.EntityInfoTopComponent")
@ActionReference(path = "Menu/Window")
public final class EntityInfoTopComponent extends TopComponent implements LookupListener {

    public EntityInfoTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(EntityInfoTopComponent.class, "CTL_EntityInfoTopComponent"));
        setToolTipText(NbBundle.getMessage(EntityInfoTopComponent.class, "HINT_EntityInfoTopComponent"));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelsField = new javax.swing.JTextField();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();

        labelsField.setText(org.openide.util.NbBundle.getMessage(EntityInfoTopComponent.class, "EntityInfoTopComponent.labelsField.text")); // NOI18N

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setRows(5);
        descriptionScrollPane.setViewportView(descriptionTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelsField, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(descriptionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(labelsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JTextField labelsField;
    // End of variables declaration//GEN-END:variables

    private Lookup.Result<OWLEntityNode> result = null;

    @Override
    public void componentOpened() {
	result = Utilities.actionsGlobalContext().lookupResult(OWLEntityNode.class);
	result.addLookupListener(this);
	result.allInstances();
    }

    @Override
    public void componentClosed() {
	result.removeLookupListener(this);
	result = null;
    }

    @Override
    public void resultChanged(LookupEvent le) {
	Collection<? extends OWLEntityNode> classes = result.allInstances();
	if(classes.size() > 1) {
	    labelsField.setText(classes.size() + " classes selected");
	    descriptionTextArea.setText("");
	} else if(classes.size() > 0) {
	    OWLEntityNode clazz = classes.iterator().next();
	    OWLLiteral[] labels = OWLEntityNode.labels(clazz.getEntity());
	    StringBuilder res = new StringBuilder("");
	    for(int i = 0 ; i < labels.length ; i++) {
		if(i > 0)
		    res.append(" / ");
		res.append(labels[i].getLiteral());
		if(!labels[i].getLang().equals(""))
		    res.append(" @").append(labels[i].getLang());
	    }
	    labelsField.setText(res.toString());

	    OWLLiteral[] descrs = OWLEntityNode.descriptions(clazz.getEntity());
	    res = new StringBuilder("");
	    for(int i = 0 ; i < descrs.length ; i++) {
		if(i > 0)
		    res.append("\n\n");
		res.append(descrs[i].getLiteral());
		if(!descrs[i].getLang().equals(""))
		    res.append(" @").append(descrs[i].getLang());
	    }
	    descriptionTextArea.setText(res.toString());
	}
    }

}
