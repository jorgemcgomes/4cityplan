/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Map2D.java
 *
 * Created on 31/Dez/2010, 15:09:22
 */
package org.plan.maps;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.RenderingHints;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import org.geotools.geometry.jts.ReferencedEnvelope;
import org.geotools.renderer.lite.StreamingRenderer;
import org.geotools.swing.JMapPane;
import org.geotools.swing.action.MapAction;
import org.geotools.swing.control.JMapStatusBar;

/**
 *
 * @author Jorge
 */
public class MapPanel extends javax.swing.JPanel {

    /** Creates new form Map2D */
    public MapPanel() {
        initComponents();
        initMap();
        initStatusBar();
        cursorToolGroup = new ButtonGroup();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();

        setLayout(new java.awt.BorderLayout());

        toolBar.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(127, 157, 185)));
        toolBar.setFloatable(false);
        toolBar.setOrientation(toolBar.HORIZONTAL);
        toolBar.setRollover(true);
        toolBar.setPreferredSize(new java.awt.Dimension(30, 30));
        add(toolBar, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
    //private JMapStatusBar status;
    private ButtonGroup cursorToolGroup;
    private JMapPane mapPane;
    public static final Color BACKGROUND_COLOR = Color.WHITE;

    private void initMap() {
        mapPane = new JMapPane();
        StreamingRenderer renderer = new StreamingRenderer();
        renderer.setInteractive(true);
        renderer.setGeneralizationDistance(0.8);

        Map<RenderingHints.Key, Object> j2d = new HashMap<RenderingHints.Key, Object>();
        j2d.put(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_SPEED);
        j2d.put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        j2d.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_SPEED);
        j2d.put(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_SPEED);
        j2d.put(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_NORMALIZE);
        RenderingHints hints = new RenderingHints(j2d);
        renderer.setJava2DHints(hints);

        Map params = new HashMap();
        params.put(StreamingRenderer.ADVANCED_PROJECTION_HANDLING_KEY, Boolean.TRUE);
        params.put(StreamingRenderer.LINE_WIDTH_OPTIMIZATION_KEY, Boolean.TRUE);
        params.put(StreamingRenderer.OPTIMIZE_FTS_RENDERING_KEY, Boolean.TRUE);
        params.put(StreamingRenderer.VECTOR_RENDERING_KEY, Boolean.TRUE);
        renderer.setRendererHints(params);

        mapPane.setRenderer(renderer);
        mapPane.setBackground(BACKGROUND_COLOR);
        mapPane.addMouseWheelListener(new WheelZoom());
        mapPane.setPaintDelay(200);
        add(mapPane, BorderLayout.CENTER);
        validate();
    }

    private void initStatusBar() {
        //status = JMapStatusBar.createDefaultStatusBar(mapPane);
        //add(status, BorderLayout.SOUTH);
    }

    protected void addToolbarAction(MapAction action) {
        JButton button = new JButton(action);
        button.setBackground(toolBar.getBackground());
        toolBar.add(button);
        cursorToolGroup.add(button);
    }

    public JMapPane getPane() {
        return mapPane;
    }

    private class WheelZoom implements MouseWheelListener {

        private final double zoomFactor = 0.1;

        @Override
        public void mouseWheelMoved(MouseWheelEvent e) {
            int clicks = e.getWheelRotation();
            // -ve means wheel moved up, +ve means down
            int sign = (clicks < 0 ? -1 : 1);

            ReferencedEnvelope env = mapPane.getDisplayArea();
            double width = env.getWidth();
            double delta = width * zoomFactor * sign;

            env.expandBy(delta);
            mapPane.setDisplayArea(env);
            mapPane.repaint();
        }
    }
}
