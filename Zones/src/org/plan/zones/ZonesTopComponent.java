/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.plan.zones;

import java.awt.Image;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.LookupEvent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.ChildFactory;
import org.openide.nodes.Children; 
import org.openide.nodes.Node;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.LookupListener;
import org.plan.maps.MapProvider;
import org.plan.maps.SelectableMap;
import org.plan.ont.GISCore;
import org.plan.ont.OntologyManager;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.reasoner.OWLReasoner;

/**
 * Top component which displays something.
 */
@TopComponent.Description(preferredID = "ZonesTopComponent",persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ZonesTopComponent",preferredID = "ZonesTopComponent")
@ActionID(category = "Window", id = "org.plan.zones.ZonesTopComponent")
@ActionReference(path = "Menu/Window")
public final class ZonesTopComponent extends TopComponent implements 
        ExplorerManager.Provider, LookupListener, PropertyChangeListener {

    private ExplorerManager explorer;
    private ZoneFactory factory;

    public ZonesTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ZonesTopComponent.class, "CTL_ZonesTopComponent"));
        setToolTipText(NbBundle.getMessage(ZonesTopComponent.class, "HINT_ZonesTopComponent"));

        explorer = new ExplorerManager();
	explorer.addPropertyChangeListener(this);
        super.associateLookup(ExplorerUtils.createLookup(explorer, super.getActionMap()));
    }

    private class RootNode extends AbstractNode {

	RootNode() {
	    super(Children.create(factory, true));
	    super.setDisplayName("Zones");
	}

	@Override
	public Image getOpenedIcon(int type) {
	    return ImageUtilities.loadImage ("org/plan/zones/resources/zonesroot_small.png");
	}
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        zonesNodes = new BeanTreeView();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(zonesNodes, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(zonesNodes, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane zonesNodes;
    // End of variables declaration//GEN-END:variables

    @Override
    public ExplorerManager getExplorerManager() {
        return explorer;
    }
    private Lookup.Result<ZoneNode> result = null;

    @Override
    public void componentOpened() {
        result = getLookup().lookupResult(ZoneNode.class);
        result.allInstances();
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
        result = null;
    }

    @Override
    public void resultChanged(LookupEvent le) {
        SelectableMap map = Lookup.getDefault().lookup(MapProvider.class).getMainMap();
	Collection<? extends ZoneNode> selected = result.allInstances();
	Node[] nodes = explorer.getRootContext().getChildren().getNodes(true);
	for(Node n : nodes) {
	    if(n instanceof ZoneNode) {
		ZoneNode zn = (ZoneNode) n;
		if(selected.contains(zn)) {
		    zn.highlightFeatures();
		} else {
		    zn.getLayerFeatures().clear();
		}
	    }
	}
        map.update();
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getSource() == explorer &&
                ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName())) {
           setActivatedNodes(explorer.getSelectedNodes());
        }
    }

    private class ZoneFactory extends ChildFactory<OWLNamedIndividual> {

        @Override
        protected boolean createKeys(List<OWLNamedIndividual> list) {
            OntologyManager om = Lookup.getDefault().lookup(OntologyManager.class);
            OWLReasoner reasoner = om.getIndividualsReasoner();
            OWLClass z = om.getFactory().getOWLClass(GISCore.ZONE.iri);
            Set<OWLNamedIndividual> flattened = reasoner.getInstances(z, true).getFlattened();
            System.out.println(flattened.size() + " zones");
            list.addAll(flattened);
            return true;
        }

        @Override
        protected Node createNodeForKey(OWLNamedIndividual key) {
            ZoneNode n = new ZoneNode(key);
            return n;
        }

        void refresh() {
            super.refresh(false);
        }
    }

    void refreshZones() {
        if(factory == null) {
            factory = new ZoneFactory();
            explorer.setRootContext(new RootNode());
        } else {
            factory.refresh();
        }
    }
}
