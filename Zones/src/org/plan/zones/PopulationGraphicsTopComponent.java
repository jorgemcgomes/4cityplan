/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.plan.zones;

import java.awt.Color;
import java.awt.Dimension;
import java.util.Collection;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.title.TextTitle;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.LookupEvent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.Lookup;
import org.openide.util.LookupListener;

/**
 * Top component which displays something.
 */
@TopComponent.Description(preferredID = "PopulationGraphicsTopComponent", persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@TopComponent.OpenActionRegistration(displayName = "#CTL_PopulationGraphicsTopComponent",preferredID = "PopulationGraphicsTopComponent")
@ActionID(category = "Window", id = "org.plan.zones.PopulationGraphicsTopComponent")
@ActionReference(path = "Menu/Window")
public final class PopulationGraphicsTopComponent extends TopComponent implements LookupListener {

    public PopulationGraphicsTopComponent() {
	initComponents();
	chartPanel.setLayout(new WrapLayout());
	setName(NbBundle.getMessage(PopulationGraphicsTopComponent.class, "CTL_PopulationGraphicsTopComponent"));
	setToolTipText(NbBundle.getMessage(PopulationGraphicsTopComponent.class, "HINT_PopulationGraphicsTopComponent"));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        chartPanel = new javax.swing.JPanel();

        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        chartPanel.setAutoscrolls(true);

        javax.swing.GroupLayout chartPanelLayout = new javax.swing.GroupLayout(chartPanel);
        chartPanel.setLayout(chartPanelLayout);
        chartPanelLayout.setHorizontalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );
        chartPanelLayout.setVerticalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );

        scrollPane.setViewportView(chartPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartPanel;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
    private Lookup.Result<ZoneNode> result;

    @Override
    public void componentOpened() {
        ZonesTopComponent tc = (ZonesTopComponent) WindowManager.getDefault().findTopComponent("ZonesTopComponent");
	result = tc.getLookup().lookupResult(ZoneNode.class);
	result.allInstances();
	result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
	result.removeLookupListener(this);
	result = null;
    }

    @Override
    public void resultChanged(LookupEvent le) {
	Collection<? extends ZoneNode> allInstances = result.allInstances();
	chartPanel.removeAll();
	if (allInstances.size() == 1) {
	    ZoneNode zone = allInstances.iterator().next();
	    Collection<JFreeChart> charts = zone.getCharts();
	    System.out.println("charts: " + charts.size());
	    for (JFreeChart chart : charts) {
		chart.setTitle(new TextTitle(chart.getTitle().getText(),
			new java.awt.Font("SansSerif", java.awt.Font.BOLD, 12)));
		ChartPanel p = new ChartPanel(chart);
		p.setPreferredSize(new Dimension(300, 300));
		chartPanel.add(p);
	    }
	}
	chartPanel.validate();
    }
}
