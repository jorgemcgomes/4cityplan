/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.plan.fl;

import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.LinkedHashMap;
import java.util.Set;
import javax.swing.SwingWorker;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;

/**
 * Top component which displays something.
 */
@TopComponent.Description(preferredID = "FacilityLocationTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = true)
@ActionID(category = "Window", id = "org.plan.fl.FacilityLocationTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_FacilityLocationAction",
preferredID = "FacilityLocationTopComponent")
public final class FacilityLocationTopComponent extends TopComponent {

    private FacilitySimulator sim;

    public FacilityLocationTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(FacilityLocationTopComponent.class, "CTL_FacilityLocationTopComponent"));
        setToolTipText(NbBundle.getMessage(FacilityLocationTopComponent.class, "HINT_FacilityLocationTopComponent"));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        setupTab = new javax.swing.JPanel();
        gridSizeLabel = new javax.swing.JLabel();
        gridSize = new javax.swing.JSlider();
        setupButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        turnLength = new javax.swing.JSlider();
        jLabel9 = new javax.swing.JLabel();
        cooldown = new javax.swing.JSlider();
        jLabel10 = new javax.swing.JLabel();
        deathResistance = new javax.swing.JSlider();
        clearButton = new javax.swing.JButton();
        typesTab = new javax.swing.JPanel();
        fitnessTab = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        emptySlider = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        occupiedSlider = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        enemySlider = new javax.swing.JSlider();
        jLabel6 = new javax.swing.JLabel();
        bufferProxSlider = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        providersProxSlider = new javax.swing.JSlider();
        runTab = new javax.swing.JPanel();
        stepButton = new javax.swing.JButton();
        goButton = new javax.swing.JToggleButton();
        updateInterval = new javax.swing.JSlider();
        progress = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        updateDelay = new javax.swing.JSlider();

        org.openide.awt.Mnemonics.setLocalizedText(gridSizeLabel, org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.gridSizeLabel.text")); // NOI18N

        gridSize.setMajorTickSpacing(5);
        gridSize.setMaximum(50);
        gridSize.setMinorTickSpacing(1);
        gridSize.setPaintLabels(true);
        gridSize.setPaintTicks(true);
        gridSize.setSnapToTicks(true);
        gridSize.setValue(20);

        org.openide.awt.Mnemonics.setLocalizedText(setupButton, org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.setupButton.text")); // NOI18N
        setupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.jLabel8.text")); // NOI18N

        turnLength.setMaximum(20);
        turnLength.setMinimum(1);
        turnLength.setMinorTickSpacing(1);
        turnLength.setPaintTicks(true);
        turnLength.setToolTipText(org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.turnLength.toolTipText")); // NOI18N
        turnLength.setValue(3);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.jLabel9.text")); // NOI18N

        cooldown.setMaximum(19);
        cooldown.setMinorTickSpacing(1);
        cooldown.setPaintTicks(true);
        cooldown.setToolTipText(org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.cooldown.toolTipText")); // NOI18N
        cooldown.setValue(4);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.jLabel10.text")); // NOI18N

        deathResistance.setMaximum(19);
        deathResistance.setMinorTickSpacing(1);
        deathResistance.setPaintTicks(true);
        deathResistance.setToolTipText(org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.deathResistance.toolTipText")); // NOI18N
        deathResistance.setValue(5);

        org.openide.awt.Mnemonics.setLocalizedText(clearButton, org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.clearButton.text")); // NOI18N
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout setupTabLayout = new javax.swing.GroupLayout(setupTab);
        setupTab.setLayout(setupTabLayout);
        setupTabLayout.setHorizontalGroup(
            setupTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(setupTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gridSize, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(gridSizeLabel)
                    .addComponent(jLabel8)
                    .addComponent(turnLength, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(jLabel9)
                    .addComponent(cooldown, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(jLabel10)
                    .addComponent(deathResistance, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(setupButton, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
                .addContainerGap())
        );
        setupTabLayout.setVerticalGroup(
            setupTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gridSizeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gridSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(turnLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cooldown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deathResistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(setupButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton)
                .addContainerGap())
        );

        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.setupTab.TabConstraints.tabTitle"), setupTab); // NOI18N

        typesTab.setLayout(new java.awt.BorderLayout());
        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.typesTab.TabConstraints.tabTitle"), typesTab); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.jLabel3.text")); // NOI18N

        emptySlider.setMajorTickSpacing(20);
        emptySlider.setMinorTickSpacing(5);
        emptySlider.setPaintTicks(true);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.jLabel4.text")); // NOI18N

        occupiedSlider.setMajorTickSpacing(20);
        occupiedSlider.setMinorTickSpacing(5);
        occupiedSlider.setPaintTicks(true);
        occupiedSlider.setValue(70);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.jLabel5.text")); // NOI18N

        enemySlider.setMajorTickSpacing(20);
        enemySlider.setMinorTickSpacing(5);
        enemySlider.setPaintTicks(true);
        enemySlider.setValue(10);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.jLabel6.text")); // NOI18N

        bufferProxSlider.setMajorTickSpacing(20);
        bufferProxSlider.setMinorTickSpacing(5);
        bufferProxSlider.setPaintTicks(true);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.jLabel7.text")); // NOI18N

        providersProxSlider.setMajorTickSpacing(20);
        providersProxSlider.setMinorTickSpacing(5);
        providersProxSlider.setPaintTicks(true);

        javax.swing.GroupLayout fitnessTabLayout = new javax.swing.GroupLayout(fitnessTab);
        fitnessTab.setLayout(fitnessTabLayout);
        fitnessTabLayout.setHorizontalGroup(
            fitnessTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fitnessTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fitnessTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(emptySlider, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(occupiedSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(jLabel5)
                    .addComponent(enemySlider, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(jLabel6)
                    .addComponent(bufferProxSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(jLabel7)
                    .addComponent(providersProxSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
                .addContainerGap())
        );
        fitnessTabLayout.setVerticalGroup(
            fitnessTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fitnessTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(emptySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(occupiedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enemySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bufferProxSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(providersProxSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.fitnessTab.TabConstraints.tabTitle"), fitnessTab); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(stepButton, org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.stepButton.text")); // NOI18N
        stepButton.setToolTipText(org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.stepButton.toolTipText")); // NOI18N
        stepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(goButton, org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.goButton.text")); // NOI18N
        goButton.setToolTipText(org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.goButton.toolTipText")); // NOI18N
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        updateInterval.setMajorTickSpacing(5);
        updateInterval.setMaximum(50);
        updateInterval.setMinimum(1);
        updateInterval.setMinorTickSpacing(1);
        updateInterval.setPaintTicks(true);
        updateInterval.setSnapToTicks(true);
        updateInterval.setToolTipText(org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.updateInterval.toolTipText")); // NOI18N
        updateInterval.setValue(1);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.jLabel2.text")); // NOI18N

        updateDelay.setMajorTickSpacing(500);
        updateDelay.setMaximum(5000);
        updateDelay.setMinorTickSpacing(100);
        updateDelay.setPaintTicks(true);
        updateDelay.setToolTipText(org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.updateDelay.toolTipText")); // NOI18N
        updateDelay.setValue(500);

        javax.swing.GroupLayout runTabLayout = new javax.swing.GroupLayout(runTab);
        runTab.setLayout(runTabLayout);
        runTabLayout.setHorizontalGroup(
            runTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, runTabLayout.createSequentialGroup()
                .addGroup(runTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, runTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(progress, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, runTabLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(goButton, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stepButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, runTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, runTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(updateInterval, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, runTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, runTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(updateDelay, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)))
                .addContainerGap())
        );
        runTabLayout.setVerticalGroup(
            runTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(runTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(runTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goButton)
                    .addComponent(stepButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 159, Short.MAX_VALUE)
                .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabbedPane.addTab(org.openide.util.NbBundle.getMessage(FacilityLocationTopComponent.class, "FacilityLocationTopComponent.runTab.TabConstraints.tabTitle"), runTab); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupButtonActionPerformed
        sim = new FacilitySimulator();
        sim.setup();
    }//GEN-LAST:event_setupButtonActionPerformed

    private void stepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepButtonActionPerformed
        StepRunner sr = new StepRunner();
        sr.addPropertyChangeListener(
                new PropertyChangeListener() {
                    @Override
                    public void propertyChange(PropertyChangeEvent evt) {
                        if ("progress".equals(evt.getPropertyName())) {
                            progress.setValue((Integer) evt.getNewValue());
                        }
                    }
                });
        sr.execute();
    }//GEN-LAST:event_stepButtonActionPerformed

    private class StepRunner extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {
            setProgress(0);
            sim.updateConditions();
            int interval = updateInterval.getValue();
            for (int i = 0; i < interval; i++) {
                sim.step();
                setProgress((i + 1) * (100 / interval));
            }
            return null;
        }

        @Override
        protected void done() {
            sim.updateMap();
        }
    }
    
    private class GoRunner extends SwingWorker<Void, Void> {
        @Override
        protected Void doInBackground() throws Exception {
            sim.updateConditions();
            int interval = updateInterval.getValue();
            while(!isCancelled()) {
                for(int i = 0 ; i < interval ; i++) {
                    sim.step();
                }
                sim.updateMap();
                Thread.sleep(updateDelay.getValue());
            }
            return null;
        }
    }
    
    private GoRunner goTask;

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        boolean selected = goButton.isSelected();
        if(selected) {
            progress.setIndeterminate(true);
            goTask = new GoRunner();
            goTask.execute();
        } else {
            goTask.cancel(false);
            progress.setIndeterminate(false);
        }
    }//GEN-LAST:event_goButtonActionPerformed

private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
    sim.clearEverything();
}//GEN-LAST:event_clearButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JSlider bufferProxSlider;
    private javax.swing.JButton clearButton;
    javax.swing.JSlider cooldown;
    javax.swing.JSlider deathResistance;
    javax.swing.JSlider emptySlider;
    javax.swing.JSlider enemySlider;
    private javax.swing.JPanel fitnessTab;
    private javax.swing.JToggleButton goButton;
    protected javax.swing.JSlider gridSize;
    private javax.swing.JLabel gridSizeLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    javax.swing.JSlider occupiedSlider;
    private javax.swing.JProgressBar progress;
    javax.swing.JSlider providersProxSlider;
    private javax.swing.JPanel runTab;
    private javax.swing.JButton setupButton;
    private javax.swing.JPanel setupTab;
    private javax.swing.JButton stepButton;
    private javax.swing.JTabbedPane tabbedPane;
    javax.swing.JSlider turnLength;
    private javax.swing.JPanel typesTab;
    private javax.swing.JSlider updateDelay;
    private javax.swing.JSlider updateInterval;
    // End of variables declaration//GEN-END:variables
    private CheckBoxList<ProviderType> typesList;

    void updateList(Set<ProviderType> types) {
        LinkedHashMap<ProviderType, Boolean> items = new LinkedHashMap<ProviderType, Boolean>();
        for (ProviderType t : types) {
            items.put(t, true);
        }
        typesList = new CheckBoxList<ProviderType>(items);
        typesTab.removeAll();
        typesTab.add(typesList, BorderLayout.CENTER);
    }

    LinkedHashMap<ProviderType, Boolean> getTypesSelection() {
        return typesList.getItems();
    }
}
